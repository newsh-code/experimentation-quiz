import jsPDF from 'jspdf';
import { QuizState } from '../context/QuizContext';

const PERSONAS = {
  beginner: {
    name: "Experimentation Explorer ðŸŒ±",
    description: "You're taking your first steps into the world of experimentation. Like a curious scientist with a fresh lab coat, you're eager to learn and grow.",
    recommendations: [
      "Start with simple A/B tests",
      "Focus on building a data-driven culture",
      "Document your experiments",
    ]
  },
  intermediate: {
    name: "Test & Learn Tactician ðŸš€",
    description: "You've got the basics down and are starting to see real impact. Like a skilled chef perfecting their recipes, you're refining your approach.",
    recommendations: [
      "Implement more sophisticated testing methods",
      "Develop a formal experimentation process",
      "Build cross-functional testing teams",
    ]
  },
  advanced: {
    name: "Experimentation Expert ðŸŽ¯",
    description: "You're operating at an advanced level. Like a master conductor, you orchestrate complex experiments with precision and insight.",
    recommendations: [
      "Scale your experimentation program",
      "Mentor others in experimentation",
      "Pioneer new testing methodologies",
    ]
  }
};

function getPersonaLevel(score: number): keyof typeof PERSONAS {
  if (score >= 80) return 'advanced';
  if (score >= 60) return 'intermediate';
  return 'beginner';
}

function formatScore(score: number): string {
  return `${Math.round(score)}%`;
}

export async function generatePDFReport(state: QuizState): Promise<void> {
  if (!state.scores) {
    throw new Error('No scores available to generate report');
  }

  const doc = new jsPDF();
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 20;
  let yPosition = 20;

  // Helper function for text wrapping
  const addWrappedText = (text: string, y: number, maxWidth: number = pageWidth - 2 * margin) => {
    const lines = doc.splitTextToSize(text, maxWidth);
    doc.text(lines, margin, y);
    return y + (lines.length * 7);
  };

  // Header
  doc.setFontSize(24);
  doc.setTextColor(41, 128, 185); // Professional blue
  yPosition = addWrappedText('Experimentation Maturity Assessment', yPosition);

  // Date
  doc.setFontSize(10);
  doc.setTextColor(100);
  yPosition += 10;
  doc.text(new Date().toLocaleDateString(), margin, yPosition);

  // User Info
  if (state.userData) {
    yPosition += 15;
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.text(`Name: ${state.userData.name || 'Not provided'}`, margin, yPosition);
    yPosition += 7;
    doc.text(`Company: ${state.userData.company || 'Not provided'}`, margin, yPosition);
    yPosition += 7;
    doc.text(`Email: ${state.email || 'Not provided'}`, margin, yPosition);
  }

  // Overall Score and Persona
  yPosition += 20;
  doc.setFontSize(16);
  doc.setTextColor(41, 128, 185);
  doc.text('Your Results', margin, yPosition);

  yPosition += 10;
  doc.setFontSize(14);
  doc.setTextColor(0);
  const persona = PERSONAS[getPersonaLevel(state.scores.overall)];
  doc.text(`Persona: ${persona.name}`, margin, yPosition);

  yPosition += 10;
  doc.text(`Overall Maturity Score: ${formatScore(state.scores.overall)}`, margin, yPosition);

  // Category Scores
  yPosition += 15;
  doc.setFontSize(14);
  doc.setTextColor(41, 128, 185);
  doc.text('Category Breakdown', margin, yPosition);

  yPosition += 10;
  doc.setFontSize(12);
  doc.setTextColor(0);
  const categories = [
    { name: 'Process', score: state.scores.process },
    { name: 'Strategy', score: state.scores.strategy },
    { name: 'Insight', score: state.scores.insight },
    { name: 'Culture', score: state.scores.culture },
  ];

  categories.forEach(category => {
    yPosition += 7;
    doc.text(`${category.name}: ${formatScore(category.score)}`, margin, yPosition);
  });

  // Persona Description
  yPosition += 20;
  doc.setFontSize(14);
  doc.setTextColor(41, 128, 185);
  doc.text('Your Experimentation Profile', margin, yPosition);

  yPosition += 10;
  doc.setFontSize(12);
  doc.setTextColor(0);
  yPosition = addWrappedText(persona.description, yPosition);

  // Recommendations
  yPosition += 15;
  doc.setFontSize(14);
  doc.setTextColor(41, 128, 185);
  doc.text('Recommended Next Steps', margin, yPosition);

  yPosition += 10;
  doc.setFontSize(12);
  doc.setTextColor(0);
  persona.recommendations.forEach(recommendation => {
    yPosition += 7;
    doc.text(`â€¢ ${recommendation}`, margin, yPosition);
  });

  // Footer
  doc.setFontSize(10);
  doc.setTextColor(100);
  doc.text('Generated by Experimentation Maturity Assessment', margin, 280);

  // Download the PDF
  doc.save('experimentation-maturity-report.pdf');
} 